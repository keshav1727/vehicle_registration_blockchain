import { ipfs, store } from "@graphprotocol/graph-ts";

// This is an example event type generated by `graph-cli`
// from an Ethereum smart contract ABI
import {
    Transfer,
    VehicleTokenCreated,
    VehicleCertificationCreated,
    VehicleCertificationCanceled,
} from "./generated/VehicleRegistrationToken/VehicleRegistrationToken";
import { OnSale, Sold, Cancel } from "./generated/VehicleMarketplace/VehicleMarket";

// This is an example of an entity type generated from a
// subgraph's GraphQL schema
import { Token, SaleTicket, Transfer as TransferEntity, Certification } from "./generated/schema";

export function handleTransfer(event: Transfer): void {
    // Transfer Entity

    let transfer = new TransferEntity(event.transaction.hash.toHexString());
    transfer.from = event.params.from;
    transfer.to = event.params.to;
    transfer.timestamp = event.block.timestamp;
    transfer.txHash = event.transaction.hash;
    transfer.save();

    // Token Entity
    let token = Token.load(event.params.tokenId.toString());
    if (token == null) {
        token = new Token(event.params.tokenId.toString());
    }
    token.currentOwner = event.params.to;

    let transfers = token.transfers;
    transfers.push(transfer.id);
    token.transfers = transfers;

    token.save();
}

export function handleTokenCreation(event: VehicleTokenCreated): void {
    let token = Token.load(event.params.tokenId.toString());
    if (token == null) {
        token = new Token(event.params.tokenId.toString());
    }
    token.uri = event.params.uri;
    token.mintedBy = event.params.creator;
    token.currentOwner = event.params.creator;
    token.transfers = [];
    let uriSplitted = event.params.uri.split("/");
    let metadata = uriSplitted.length > 0 ? ipfs.cat(uriSplitted[uriSplitted.length - 1]) : null;
    if (metadata !== null) {
        token.metadata = metadata.toString();
    } else {
        token.metadata = "";
    }
    token.certifications = [];
    token.isOnSale = false;
    token.save();
}

export function handleOnSale(event: OnSale): void {
    let ticketID = event.params.ticketId.toString();
    let saleTicket = new SaleTicket(ticketID);
    saleTicket.price = event.params.price;
    saleTicket.token = event.params.vehicleId.toString();
    saleTicket.status = "PENDING";
    saleTicket.seller = event.params.seller;
    saleTicket.timestamp = event.block.timestamp;
    saleTicket.save();

    let token = Token.load(event.params.vehicleId.toString());
    token!.isOnSale = true;
    token!.save();
}

export function handleOnSold(event: Sold): void {
    let ticketID = event.params.ticketId.toString();
    let saleTicket = SaleTicket.load(ticketID);
    saleTicket!.status = "COMPLETED";
    saleTicket!.save();

    let token = Token.load(event.params.vehicleId.toString());
    token!.isOnSale = false;
    token!.save();
}

export function handleOnCancel(event: Cancel): void {
    let ticketID = event.params.ticketId.toString();
    let saleTicket = SaleTicket.load(ticketID);
    saleTicket!.status = "CANCELLED";
    saleTicket!.save();

    let token = Token.load(event.params.vehicleId.toString());
    token!.isOnSale = false;
    token!.save();
}

export function handleCertificationCreation(event: VehicleCertificationCreated): void {
    let token = Token.load(event.params.vehicleId.toString());
    let certification = new Certification(event.params.id.toString());
    certification.uri = event.params.uri;
    certification.createdBy = event.params.authority;
    certification.timestamp = event.block.timestamp;
    certification.txHash = event.transaction.hash;
    let uriSplitted = event.params.uri.split("/");
    let metadata = uriSplitted.length > 0 ? ipfs.cat(uriSplitted[uriSplitted.length - 1]) : null;
    if (metadata !== null) {
        certification.metadata = metadata.toString();
    } else {
        certification.metadata = "";
    }
    certification.code = event.params.code.toI32();
    certification.save();

    let certifications = token!.certifications;
    certifications.push(event.params.id.toString());
    token!.certifications = certifications;
    token!.save();
}

export function handleCertificationCancelation(event: VehicleCertificationCanceled): void {
    let token = Token.load(event.params.vehicleId.toString());
    const certificationId = event.params.id.toString();
    let filteredCertifications = [] as string[];
    for (let i = 0; token!.certifications.length - 1; i++) {
        if (token!.certifications[i] != certificationId) {
            filteredCertifications.push(token!.certifications[i]);
        }
    }
    token!.certifications = filteredCertifications;
    store.remove("Certification", event.params.id.toString());
    token!.save();
}
